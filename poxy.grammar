<document> := <full_command> <document> | <full_command>

<full_command> := <command> <terminator> | <terminator>

<command> := <assignment> | <rescope> | <link> | <each> | <expr>

<assignment> := <list_assignment> | <node_assignment>

<node_assignment> := <node> <left-arrow> <expr>

<list_assignment> := <node> <list-op> <node> <left-arrow> <expr>

<rescope> := <rescope-op> <node>

<link> := <node> <right-arrow> <node>

<each> := <each-op> <expr> <expr> <expr>
<each> := <each-op> <expr> <while-op> <expr> <expr>

<node> := <symbol_node> | <operator_node> | <root>

<symbol_node> := <path> <symbol> | <symbol>

<path> := <root> | <symbol_node> <dot>

<operator_node> := <path> <operator> | <operator>

<expr> := <left-paren> <expr> <right-paren> | <call> | <value> | <lambda> | <conditional> | <all> | <list> | <do> | <wait>

<call> := <infix> | <circumfix> | <prefix>

<wait> := <wait-op> <call>

<infix> := <param> <normal-operator> <param>

<circumfix> := <half-operator> <params> <half-terminator> | <half-operator> <half-terminator>

<prefix> := <node> <params> | <node>

<param> := <expr> | <free>

<params> := <params> <param> | <param>

<list> := <param> <list-op> <param>

-- this syntax differentiation is lame because it will require the document to end with a terminator

<lambda> := <left-bracket> <symbols> <normal-operator:|> <document> <right-bracket>
<lambda> := <left-bracket> <symbols> <normal-operator:|> <expr> <right-bracket>

<lambda> := <left-bracket> <normal-operator:|> <document> <right-bracket>
<lambda> := <left-bracket> <normal-operator:|> <expr> <right-bracket>

<symbols> := <symbols> <symbol> | <symbol>
 
<all> := <all-op> <expr> <expr>
<all> := <all-op> <expr> <while-op> <expr>

<do> := <do-op> <lambda> <params> | <do-op> <lambda>

<conditional> := <ifthen> | <ifthenelse>

<ifthen> := <if-op> <expr> <then-op> <expr> 
<ifthen> := <ifthen> <elseif-op> <expr> <then-op> <expr>

<ifthenelse> := <ifthen> <else-op> <expr>

<value> := <string> | <regexp> | <numeric>

<terminator> := <NOP>

<NOP> := <EOF> | <EOL> | <NUL> | <NOP> <NOP>

<EOL> := <newline> | <semicolon> | <comment>

<operator> := <normal-operator> | <auto-circumfix-operator> | <circumfix-operator>

<string> := <single-quoted> | <double-quoted> | <unicode-expr>

<regexp> := <match-regexp> | <subst-regexp>

<numeric> := <binary> | <octal> | <decimal> | <hexidecimal> | <float>

==EOF==

--
-- see P/Lexer.pm for the details of these grammar rules
--

<all-op>
<auto-circumfix-operator>
<binary>
<circumfix-operator>
<comment>
<decimal>
<do-op>
<dot>
<double-quoted>
<each-op>
<elif-op>
<else-op>
<float>
<free>
<half-operator>
<half-terminator>
<hexidecimal>
<if-op>
<is-op>
<left-arrow>
<left-bracket>
<list-op>
<match-regexp>
<newline>
<normal-operator>
<nothing>
<octal>
<paren>
<rescope-op>
<right-arrow>
<right-bracket>
<root>
<single-quoted>
<subst-regexp>
<symbol>
<then-op>
<unicode-expr>
